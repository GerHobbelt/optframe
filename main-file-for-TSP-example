//Rename to mainTSP.cpp to run the example

// ===================================
// Main.cpp file generated by OptFrame
// Project Traveling Salesman Problem
// ===================================

#include <stdlib.h>
#include <math.h>

#include <iostream>

#include "./OptFrame/OptFrame.h"
#include "./OptFrame/Examples/TSP.h"

using namespace std;


int main(int argc, char **argv)
{
	srand(time(NULL));

	// Optimal value for berlin52 is 7542

	Scanner scanner(new File("./OptFrame/Examples/TSP/tsplib/berlin52.txt"));

	TSPProblemInstance* p = new TSPProblemInstance(scanner);

	RandomInitialSolutionTSP is(p);

	SolutionTSP* s = is.generateSolution();

	NSEnumSwap ns(p);

	for(int i=0;i<ns.size();i++)
	{
		Move<RepTSP,MemTSP>* m = ns.kmove(i);
		cout << i<<": ";
		m->print();
		delete m;
	}

	s->print();

	TSPEvaluator eval(p);
	EvaluationTSP* e;

	e = eval.evaluate(s);
	e->print();


	Descida<RepTSP,MemTSP> descida(&eval,&ns);

	s = descida.search(s);

	e = eval.evaluate(s);
	e->print();


	SimulatedAnnealing<RepTSP,MemTSP> sa(&eval,&ns,0.99,1000,2000);

	s = sa.search(s);

	e = eval.evaluate(s);
	e->print();


	MRD<RepTSP,MemTSP> mrd(&eval,&ns,500);
	s = mrd.search(s);
	e = eval.evaluate(s);
	e->print();

	PerturbationTSP pert(&ns);

	IteratedLocalSearchLevels<RepTSP,MemTSP> ils(&eval,&mrd,&pert,10,15);

	s = ils.search(s);
	e = eval.evaluate(s);
	e->print();


	BuscaTabu<RepTSP,MemTSP> bt(&eval,&ns,10,200);

	s = bt.search(s);
	e = eval.evaluate(s);
	e->print();


	cout << "Program ended successfully";

	return 0;
}

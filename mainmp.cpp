//Rename to mainTSP.cpp to run the example

// ===================================
// Main.cpp file generated by OptFrame
// Project Traveling Salesman Problem
// ===================================

#include <stdlib.h>
#include <math.h>

#include <iostream>

#include "./OptFrame/OptFrame.h"
#include "./OptFrame/Examples/TSP.h"

using namespace std;


int main(int argc, char **argv)
{
	srand(time(NULL));

	// Optimal value for berlin52 is 7542

	Scanner scanner(new File("./OptFrame/Examples/TSP/tsplib/berlin52.txt"));

	TSPProblemInstance* p = new TSPProblemInstance(scanner);

	RandomInitialSolutionTSP is(p);

	SolutionTSP* s = is.generateSolution();

	NSEnumSwap ns(p);

	MRNS<RepTSP,MemTSP> mrns(2,&ns);

	s->print();

	TSPEvaluator eval(p);
	EvaluationTSP* e;

	e = eval.evaluate(s);
	e->print();


	HeuristicFactory<RepTSP,MemTSP> factory;

	factory.add_initsol(&is);
	factory.add_ev(&eval);
	factory.add_ns(&mrns);
	factory.add_ilsl_pert(new PerturbationTSP(&mrns));

	pair<Heuristic<RepTSP,MemTSP>*, string> method;
	method = factory.createHeuristic("Descida ev 0 ns 0");

	s = method.first->search(s);
	eval.evaluate(s)->print();

	//method = factory.createHeuristic("SA ev 0 ns 0 0.99 2000 5232.5");
	//method = factory.createHeuristic("TS ev 0 ns 0 10 300");
	//method = factory.createHeuristic("MRD ev 0 ns 0 200");
	//method = factory.createHeuristic("VND ev 0 [ ns 0 ]");
	//method = factory.createHeuristic("ILSL ev 0 MRD ev 0 ns 0 500 ilsl_pert 0 10 15");
	//method = factory.createHeuristic("VNS ev 0 [ ns 0 ] MRD ev 0 ns 0 200");
	method = factory.createHeuristic("ILSL ev 0 RVND ev 0 [ ns 0 ] ilsl_pert 0 100 20");

	s = method.first->safeSearch(0,10,s);
	eval.evaluate(s)->print();

	OptFrame<RepTSP,MemTSP> optframe(&factory);
	optframe.execute();

	cout << "Program ended successfully" << endl;

	return 0;
}
